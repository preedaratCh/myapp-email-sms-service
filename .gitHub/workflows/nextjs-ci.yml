name: Deploy Next.js to web hosting via FTP

on:
  push:
    branches: ["release"]  # Trigger when code is pushed to the 'release' branch
  path: 'email-sms-sending/*'  # Trigger when changes are made in the 'email-sms-sending' folder
  workflow_dispatch:  # Trigger manually from GitHub UI

permissions:
  contents: read  # Grant permission to read repository contents

concurrency:
  group: "pages"  # Group of jobs to ensure only one job runs at a time
  cancel-in-progress: false  # Don't cancel the in-progress job if a new one is triggered

jobs:
  build:
    runs-on: ubuntu-latest  # Run the build job on the latest Ubuntu environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Checkout the repository's code to the runner

      - name: Detect package manager
        id: detect-package-manager
        run: |
          # Detect which package manager (Bun, Yarn, or NPM) is used in the project
          if [ -f "${{ github.workspace }}/bun.lockb" ]; then
            echo "manager=bun" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=bun" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1  # If no package manager is found, exit with an error
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "23"  # Use Node.js version 23.x
          cache: ${{ steps.detect-package-manager.outputs.manager }}  # Cache based on the package manager detected

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache  # Restore the Next.js cache to speed up builds
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/bun.lockb') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/bun.lockb') }}-
          # Use a hash of package-lock, yarn.lock, and code files to cache dependencies

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        # Install dependencies using the detected package manager (npm, yarn, or bun)

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        # Run 'next build' to build the Next.js project

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
        # Upload the built project (output in 'out' directory) as an artifact for deployment

  deploy:
    runs-on: ubuntu-latest  # Run the deploy job on the latest Ubuntu environment
    needs: build  # Make sure the deploy job runs only after the build job is successful
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Checkout the repository's code to the runner

      - name: Download artifact
        uses: actions/download-pages-artifact@v3
        with:
          path: ./out
        # Download the artifact (built project) from the build job

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.0
        with:
          server: ${{ secrets.FTP_SERVER }}  # FTP server address stored in GitHub Secrets
          username: ${{ secrets.FTP_USERNAME }}  # FTP username stored in GitHub Secrets
          password: ${{ secrets.FTP_PASSWORD }}  # FTP password stored in GitHub Secrets
          local-dir: ./out  # Directory with the built project to upload
          server-dir: /path/to/your/server/directory  # The target directory on the FTP server
        # Deploy the built project to the FTP server
